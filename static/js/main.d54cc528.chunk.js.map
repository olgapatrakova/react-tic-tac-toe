{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","winner","onClickCallback","id","Board","squareList","squares","map","row","cell","key","generateSquareComponents","console","log","generateSquares","currentId","push","col","App","useState","setSquares","itsXTurn","setXTurn","undefined","setWinner","checkForWinner","winningIndexes","flattenedSquares","flat","i","length","a","b","c","toUpperCase","noValueSquare","squaresList","new_row","square","updatedSquare","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d54cc528.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n\n  const onSquareClick = () => {\n    // call the function passed from `App` if the square value is ''\n    // do nothing if there is already some value or the winner is found\n    if (props.value === '' && !props.winner) {\n      props.onClickCallback(props.id);\n    };\n  };\n\n\n  return <button\n    className=\"square\"\n    onClick={onSquareClick} \n  >\n    {props.value} {/* Text of the button */}\n  </button>\n};\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback, winner) => {\n  // Complete this for Wave 1\n  return squares.map((row) => {\n    return row.map((cell) => {\n      return (\n        <Square\n          key={cell.id}\n          value={cell.value}\n          id={cell.id}\n          onClickCallback={onClickCallback}\n          winner={winner}\n        />\n      );\n    });\n  });\n};\n\nconst Board = ({ squares, onClickCallback, winner }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback, winner);\n  console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n    ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    };\n  };\n  return squares;\n}\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares());\n  const [itsXTurn, setXTurn] = useState(true);\n  const [winner, setWinner] = useState(undefined)\n\n  const takeTurns = () => {\n    setXTurn(!itsXTurn);\n  };\n\n  \n\n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n  const onClickCallback = (id) => {\n    const squaresList = [];\n    for (let row of squares) {\n      const new_row = [];\n      for (let square of row) {\n        // Update the value of a square if its id is the same as the passed id from the 'Square' component\n        if (square.id === id) {\n          let updatedSquare = square;\n          updatedSquare.value = itsXTurn ? PLAYER_1 : PLAYER_2;\n          new_row.push(updatedSquare);\n        } else {\n          new_row.push(square)\n        };\n      };\n      squaresList.push(new_row);\n    };\n    setSquares(squaresList);\n    takeTurns();\n    checkForWinner();\n  };\n\n  const checkForWinner = () => {\n    // Complete in Wave 3\n    const winningIndexes = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    // Iterate over the winning indexes and check if there is a winning combination in the current square indexes with values\n    // Flatten the current squares array\n    let flattenedSquares = squares.flat();\n    for (let i = 0; i < winningIndexes.length; i++) {\n      // Array destructuring, abc store indexes\n      const [a, b, c] = winningIndexes[i];\n      if (flattenedSquares[a].value && flattenedSquares[a].value === flattenedSquares[b].value && flattenedSquares[a].value === flattenedSquares[c].value) {\n        setWinner(`The winner is ${flattenedSquares[a].value.toUpperCase()}`);\n        return;\n      };\n    };\n    // Make sure there are some empty squares. If none, display 'No winner'\n    let noValueSquare = 0;\n    for (let square of flattenedSquares) {\n      if (square.value === '') {\n        noValueSquare++\n      };\n    };\n    if (noValueSquare === 0) {setWinner('No winner!')}\n  };    \n\n  const resetGame = () => {\n    // Complete in Wave 4\n    setWinner(undefined);\n    setXTurn(true);\n    let squares = generateSquares();\n    setSquares(squares);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{winner} </h2>\n        <button onClick={resetGame}> Reset Game </button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={onClickCallback} winner={winner}/> {/* Squares and function are passed as props to Board */}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}